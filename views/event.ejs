<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://use.typekit.net/mev6qqe.css">
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/createevents.css">
    <title>Create Event</title>
</head>
<body>
<div class="navLogo">
    <a href= "/">
        <p>GT<span class="word">W</span>O</p>
    </a>
</div>

<div class="container">
    <form id="eventForm" method="POST" action="/events/eventForm" enctype="multipart/form-data">

        <h1 id="currentPageTitle">Create An Event</h1>
        <div class="formBox">
            <h4>Upload thumbnail of event</h4>
            <div id="thumb-file-wrapper" class="thumbnail-file">
                <input type="file" name="thumbnail" id="thumbnail-file">
                <div id="ai-thumbnail-display"></div>
            </div>
            <h5>(Upload a picture of the event on the community bulletin board)</h5>

            <div class="thumbAi">
                <button type="button" id="previewAi" class="thumbAi-btn">
                    <img src="images/generate-thumbnail.png" alt="ai" height = "30" class="generate-thumbnail">
                    <h6 class = "button-text">Generate Thumbnail with Artificial Intelligence</h6>
                </button>
            </div>

            <div class="sects">
                <label for="eventTitle">Event Title *</label><br>
                <input name="title" id="eventTitle" class="textareas" value="" required></input><br>
            </div>

            <div class="sects">
                <label for="Description">Event Description *</label><br>
                <textarea name="description" id="Description" required></textarea><br>
            </div>

            <div class="tags">
                <label for="Tags" class="tags">Tags</label>
                <input name="tags" id="tags" class="textareas" value="" required></input><br>
            </div>

            <div class="location-div">
                <label for="Location" class="locationLabel">Location</label><br>
                <input name="location" id="Location" class="textareas" value="" required placeholder="Location, City, State, Zip Code"></input><br>
            </div>

            <div class="times">
                <div class="event-date">
                    <label for="Date">Date</label><br>
                    <input type="date" name="date" id="Date" required value="2025-01-16">
                </div>
                <div class="time-start">
                    <label for="Time" class="timeLabel">Time Start</label></br>
                    <input type="time" name="startTime" id="t-start" required value="">
                </div>
                <div class="time-end">
                    <label for="Time" class="timeLabel">Time End</label></br>
                    <input type="time" name="endTime" id="t-end" required value="">
                </div>
            </div>
            <button type="button" id="previewButton" class="createEvent">Continue</button>
    </form>
</div>

<div class="popup-overlay" id="preview-overlay">
    <div class="thumbPreview" id="thumbPreview">
        <span class="close" id="close-preview">&times;</span>
        <h7 class= "gradient-text" > Generate Thumbnail with Artificial Intelligence</h7>
        <p>Please type in a short description of the image you'd like to generate as your thumbnail.</p>
        <textarea class="textbox"  id="textbox" row="5" name="textbox"/></textarea>
        <button class="gradient-button" id="generate-thumbnail">Generate Thumbnail</button>
    </div>
</div>

<div id="previewModal">
    <div class="preview-modal-content" >
        <h2>Preview Your Event</h2>
        <div id="previewContent">
        </div>
        <div class="preview-actions">
            <button id="editBtn">Edit</button>
            <button id="confirmBtn">Confirm</button>
        </div>
    </div>
</div>

<script>
    const previewOverlay = document.getElementById('preview-overlay');
    const thumbPreview = document.getElementById('thumbPreview');
    const previewAi = document.getElementById('previewAi');
    const closePreview = document.getElementById('close-preview');
    const generateThumbnail = document.getElementById('generate-thumbnail');
    const textbox = document.getElementById('textbox');
    const eventForm = document.getElementById('eventForm');
    const previewButton = document.getElementById('previewButton');
    const previewModal = document.getElementById('previewModal');
    const previewContent = document.getElementById('previewContent');
    const editBtn = document.getElementById('editBtn');
    const confirmBtn = document.getElementById('confirmBtn');


    const thumbFileWrapper = document.getElementById('thumb-file-wrapper');
    const aiThumbnailDisplay = document.getElementById('ai-thumbnail-display');

    previewAi.addEventListener('click', () => {
        previewOverlay.style.display = "flex";
    });

    generateThumbnail.addEventListener('click', async () => {
        const description = textbox.value.trim();
        if (!description) {
            alert("Please provide a description for the AI to generate a thumbnail.");
            generateThumbnail.textContent = 'Generate Thumbnail';
            generateThumbnail.disabled = false;
            return;
        }
        generateThumbnail.textContent = 'Generating...';
        generateThumbnail.disabled = true;
        console.log("Attempting to generate thumbnail with description:", description); // Debugging
        let result = null;
        try {
            const response = await fetch(`/events/generateThumbnail`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ description: description })
            });
            if (!response.ok) {
                let errorDetails = "Unknown server error.";
                try {
                    const errorData = await response.json();
                    errorDetails = errorData.error || errorDetails;
                } catch (jsonError) {
                    errorDetails = response.statusText;
                }
                throw new Error(`AI generation failed: ${response.status} - ${errorDetails}`);
            }
            result = await response.json();
            if (result.success && result.imageData) {

                document.getElementById('thumbnail-file').style.display = 'none'; // Hide the file input
                thumbFileWrapper.style.display = 'block';
                aiThumbnailDisplay.innerHTML = '';
                const generatedImg = document.createElement('img');
                generatedImg.src = `data:${result.mimeType};base64,${result.imageData}`;
                generatedImg.style.maxWidth = '100%';
                generatedImg.style.height = 'auto';
                generatedImg.style.display = 'block';
                generatedImg.style.border = '1px solid limegreen'; // For debugging visibility
                generatedImg.style.minHeight = '150px'; // For debugging visibility
                generatedImg.style.backgroundColor = '#e0ffe0'; // For debugging visibility
                aiThumbnailDisplay.appendChild(generatedImg);
                sessionStorage.setItem('generatedAiThumbnailData', JSON.stringify({
                    data: result.imageData,
                    mime: result.mimeType
                }));
                alert("AI Thumbnail generated successfully!");
                previewOverlay.style.display = 'none';
            } else {
                alert("Failed to generate AI Thumbnail: " + (result.error || "Server indicated failure."));
            }
        } catch (error) {
            console.error("Error during AI thumbnail generation request:", error);
            alert(error.message);
        } finally {
            generateThumbnail.textContent = 'Generate Thumbnail';
            generateThumbnail.disabled = false;
        }
    });

    closePreview.addEventListener('click', () => {
        previewContent.innerHTML = "";
        previewOverlay.style.display = 'none';});

    previewButton.addEventListener('click', (event) => {
        event.preventDefault();

        if (eventForm.checkValidity()) {
            previewContent.innerHTML = "";

            const previewFields = [
                { label: 'Event Title', value: document.getElementsByName('title')[0].value },
                { label: 'Event Description', value: document.getElementsByName('description')[0].value },
                { label: 'Date', value: document.getElementsByName('date')[0].value },
                { label: 'Time Start', value: document.getElementsByName('startTime')[0].value },
                { label: 'Time End', value: document.getElementsByName('endTime')[0].value },
                { label: 'Location', value: document.getElementsByName('location')[0].value },
                { label: 'Tags', value: document.getElementsByName('tags')[0].value }
            ];

            const generatedAiThumbnailData = sessionStorage.getItem('generatedAiThumbnailData');
            console.log('generatedAiThumbnailData from sessionStorage in preview:', generatedAiThumbnailData); // Debugging
            if (generatedAiThumbnailData) {
                const { data, mime } = JSON.parse(generatedAiThumbnailData);
                console.log('Parsed AI Data in preview - mime:', mime, 'Data length:', data.length); // Debugging
                const img = document.createElement('img');
                img.src = `data:${mime};base64,${data}`;
                img.style.maxWidth = '200px';
                previewContent.appendChild(img);
                previewFields.push({ label: 'Event Thumbnail (AI Generated)', value: 'Displayed above' });
            } else {
                console.log('No AI thumbnail data in sessionStorage in preview. Checking for manual upload.'); // Debugging
                const thumbnailFile = document.getElementsByName('thumbnail')[0].files[0];
                if (thumbnailFile) {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(thumbnailFile);
                    img.style.maxWidth = '200px';
                    previewContent.appendChild(img);
                    previewFields.push({ label: 'Event Thumbnail', value: thumbnailFile.name });
                }
            }

            previewFields.forEach(function(field) {
                const previewItem = document.createElement('div');
                previewItem.classList.add('preview-item');
                let displayValue = field.value;
                previewItem.innerHTML = `
                <strong>${field.label}:</strong>
                <span>${displayValue}</span>
            `;
                previewContent.appendChild(previewItem);
            });

            previewModal.style.display = 'block';
        } else {
            eventForm.reportValidity();
        }
    });

    editBtn.addEventListener('click', () => {
        previewModal.style.display = 'none';
    });

    confirmBtn.addEventListener('click', async () => {
        const formData = new FormData(eventForm);


        const generatedAiThumbnailData = sessionStorage.getItem('generatedAiThumbnailData');
        if (generatedAiThumbnailData) {
            const { data, mime } = JSON.parse(generatedAiThumbnailData);
            const blob = await (await fetch(`data:${mime};base64,${data}`)).blob();
            formData.append('thumbnail', blob, 'ai_generated_thumbnail.png');
            console.log('AI generated thumbnail appended to FormData.'); // Debugging
        } else {
            console.log('No AI generated thumbnail found in sessionStorage to append.'); // Debugging
        }

        try {
            const response = await fetch("/events/eventForm", {
                method: "POST",
                body: formData,
            });
            const result = await response.json();

            if (result.success) {
                sessionStorage.removeItem('generatedAiThumbnailData');
                console.log("Event created successfully:", result.data); // Debugging
                window.location.href = `/events/event/${result.id}`;
            } else {
                console.error("Error creating event:", result.error); // Debugging
                alert("Failed to create event. Please try again.");
            }
        } catch (error) {
            console.error("Submission error:", error); // Debugging
            alert("An error occurred while submitting the event.");
        }
    });
</script>
</body>
</html>
