<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Autofill Event</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://use.typekit.net/mev6qqe.css" />
    <link rel="stylesheet" href="/autofill.css" />
</head>
<body>
<div class="navLogo">
    <a href="http://localhost:3000">
        <p>GT<span class="word">W</span>O</p>
    </a>
</div>
<div class="main">
    <div class="main-section">
        <div class="create-an-event">
            <div class="title">
                <p id="title-head">Autofill With AI</p>
                <p id="title-desc">Upload a picture of the event on the community bulletin board.</p>
            </div>

            <form id="autofillForm" action="/events/create" method="POST" enctype="multipart/form-data">
                <div class="fill-methods">
                    <div class="method">
                        <label for="eventImageInput">Choose File</label>
                        <input type="file" name="thumbnail" id="eventImageInput" accept="image/*">
                    </div>
                    <div class="method" id="ai-method">
                        <img src="images/ai.png" alt="ai" height="30" class="ai-sparkle">
                        <button type="submit" id="autofillButton">Autofill with AI</button>
                    </div>
                </div>
            </form>

        </div>
    </div>
</div>

<div id="previewModal">
    <div class="preview-modal-content">
        <span class="next-button" onclick="document.getElementById('previewModal').style.display='none';">&times;</span>
        <h3>Preview Event Details</h3>
        <div id="previewContent">
        </div>
        <div class="preview-actions">
            <button id="editBtn">Edit</button>
            <button id="confirmBtn">Confirm & Create</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const autofillForm = document.getElementById('autofillForm');
        const autofillButton = document.getElementById('autofillButton');
        const thumbnailFileInput = document.getElementById('eventImageInput');

        const previewModal = document.getElementById('previewModal');
        const previewContent = document.getElementById('previewContent');
        const editBtn = document.getElementById('editBtn');
        const confirmBtn = document.getElementById('confirmBtn');

        let aiExtractedEventData = {};


        autofillButton.addEventListener('click', async (event) => {
            event.preventDefault();

            const imageFile = thumbnailFileInput.files[0];
            if (!imageFile) {
                alert("Please select an image file to autofill.");
                return;
            }

            const formData = new FormData();
            formData.append('thumbnail', imageFile);

            autofillButton.textContent = 'Processing...';
            autofillButton.disabled = true;

            let aiErrorMessage = '';
            aiExtractedEventData = {};

            try {
                const response = await fetch('/events/create', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    console.log("AI extracted data:", result.data);
                    aiExtractedEventData = result.data;
                    alert("Event fields auto-filled successfully! Review and click 'Confirm & Create'.");
                } else {
                    console.error("Server responded with error during AI autofill:", result.error || "Unknown error");
                    aiErrorMessage = result.error || "Unknown server error.";
                    alert("AI autofill failed: " + aiErrorMessage + "\nPreview will show empty or incomplete fields.");
                }

            } catch (error) {
                console.error("Network or parsing error during autofill:", error);
                aiErrorMessage = "Network error: " + error.message;
                alert("An error occurred during AI autofill: " + aiErrorMessage + "\nPreview will show empty or incomplete fields.");
            } finally {

                autofillButton.textContent = 'Autofill with AI';
                autofillButton.disabled = false;


                previewContent.innerHTML = "";

                const previewFields = [
                    { label: 'Event Title', value: aiExtractedEventData.title || '' },
                    { label: 'Event Description', value: aiExtractedEventData.description || '' },
                    { label: 'Date', value: aiExtractedEventData.date ? new Date(aiExtractedEventData.date).toISOString().split('T')[0] : '' },
                    { label: 'Time Start', value: aiExtractedEventData.startTime || '' },
                    { label: 'Time End', value: aiExtractedEventData.endTime || '' },
                    { label: 'Location', value: aiExtractedEventData.location || '' },
                    { label: 'Category', value: aiExtractedEventData.category || '' },
                    { label: 'Age Suitability', value: aiExtractedEventData.age || '' },
                    { label: 'Tags', value: aiExtractedEventData.tags || '' }
                ];

                if (imageFile) {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(imageFile);
                    img.style.maxWidth = '200px';
                    previewContent.appendChild(img);
                    previewFields.unshift({ label: 'Event Thumbnail', value: imageFile.name });
                }

                previewFields.forEach(function(field) {
                    const previewItem = document.createElement('div');
                    previewItem.classList.add('preview-item');
                    previewItem.innerHTML = `<strong>${field.label}:</strong> <span>${field.value || 'N/A'}</span>`;
                    previewContent.appendChild(previewItem);
                });

                previewModal.style.display = 'flex'; // Show the modal
            }
        });


        editBtn.addEventListener('click', () => {
            previewModal.style.display = 'none';
            alert("To edit, please proceed to the 'Create An Event' page and fill fields manually, or try autofill again with a different image.");
        });

        confirmBtn.addEventListener('click', async () => {
            previewModal.style.display = 'none'; // Hide modal

            const imageFile = thumbnailFileInput.files[0];
            const finalFormData = new FormData(eventForm);

            if (imageFile) {
                finalFormData.append('thumbnail', imageFile);
            }

            for (const key in aiExtractedEventData) {
                if (key === 'location' && typeof aiExtractedEventData[key] === 'object' && aiExtractedEventData[key] !== null) {
                    finalFormData.append('location', `${aiExtractedEventData[key].city || ''}${aiExtractedEventData[key].state ? ', ' + aiExtractedEventData[key].state : ''}${aiExtractedEventData[key].zip ? ' ' + aiExtractedEventData[key].zip : ''}`.trim());
                } else if (aiExtractedEventData[key] !== null && aiExtractedEventData[key] !== undefined) {
                    finalFormData.append(key, aiExtractedEventData[key]);
                }
            }
            finalFormData.append('thumbnail');
            finalFormData.append('description', aiExtractedEventData[key].description);
            finalFormData.append('location', aiExtractedEventData.location);
            finalFormData.append('uid', '1');
            finalFormData.append('venue', 'venue');
            finalFormData.append('category', aiExtractedEventData.category);
            finalFormData.append('age', aiExtractedEventData.age);
            finalFormData.append('tags', aiExtractedEventData);
            finalFormData.append('startTime', aiExtractedEventData.startTime);
            finalFormData.append('endTime', aiExtractedEventData.endTime);
            finalFormData.append('date', aiExtractedEventData.date);

            try {
                const response = await fetch("/events/eventForm", {
                    method: 'POST',
                    body: FormData,
                });
                if (result.success) {
                    console.log("Event created successfully:", result.data);
                    window.location.href = `/events/event/${result.id}`;
                } else {
                    console.error("Error creating event:", result.error);
                    alert("Failed to create event. Please try again.");
                }


            } catch (error) {
                console.error("Final submission error:", error);
                alert("An error occurred while submitting the event.");
            }
        });

        const nextButton = document.querySelector('.next-button');
        if (nextButton) {
            nextButton.addEventListener('click', () => {
                previewModal.style.display = 'none';
            });
        }

        window.addEventListener('click', (event) => {
            if (event.target == previewModal) {
                previewModal.style.display = 'none';
            }
        });
    });
</script>
</body>
</html>